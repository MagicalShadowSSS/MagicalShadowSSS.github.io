<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>表达式求值</title>
      <link href="/2023/05/30/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
      <url>/2023/05/30/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>括号匹配</title>
      <link href="/2023/05/30/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
      <url>/2023/05/30/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="栈的应用–括号匹配"><a href="#栈的应用–括号匹配" class="headerlink" title=" 栈的应用–括号匹配"></a><center> 栈的应用–括号匹配</center></h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><ul><li>最后出现的左括号最先被匹配(LIFO)</li><li>每出现一个右括号，就有一个左括号被消耗</li><li>遇到左括号即入栈，遇到右括号就“消耗”一个左括号</li></ul><h2 id="流程图表示"><a href="#流程图表示" class="headerlink" title="流程图表示"></a>流程图表示</h2><img src="/2023/05/30/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/1.png" class title="流程图"><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;初始化栈bool InitStack(Stack&amp; S)&#123;S.top &#x3D; -1;return true;&#125;&#x2F;&#x2F;判断栈是否为空bool StackEmpty(Stack S)&#123;if (S.top &#x3D;&#x3D; -1)return true;elsereturn false;&#125;&#x2F;&#x2F;新元素入栈bool Push(Stack&amp; S, char x)&#123;if (S.top &#x3D;&#x3D; MaxSize - 1)return false;S.data[S.top + 1] &#x3D; x;S.top++;return true;&#125;&#x2F;&#x2F;出栈操作bool Pop(Stack&amp; S, char &amp;x)&#123;if (StackEmpty(S))return false;else&#123;S.data[S.top] &#x3D; x;S.top--;return true;&#125;&#125;&#x2F;&#x2F;打印栈void PrintStack(Stack S)&#123;if (S.top &#x3D;&#x3D; -1)printf(&quot;空\n&quot;);else&#123;printf(&quot;栈：&quot;);for(int i &#x3D; 0; i &lt; S.top+1; i++)&#123;printf(&quot;%c-&gt;&quot;, S.data[i]);&#125;printf(&quot;end&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;括号匹配 参数为字符数组，栈，数组长度bool braceCheck(char str[],Stack &amp;S,int length)&#123;for (int i &#x3D; 0; i &lt; length; i++) &#123;&#x2F;&#x2F;扫描到左括号，入栈if (str[i] &#x3D;&#x3D; &#39;(&#39; || str[i] &#x3D;&#x3D; &#39;&#123;&#39; || str[i] &#x3D;&#x3D; &#39;[&#39;)&#123;Push(S, str[i]);&#125;else &#123;if (StackEmpty(S)) &#x2F;&#x2F;扫描到右括号，但栈已经空了return false;else &#123;char topElem;Pop(S, topElem);if (str[i] &#x3D;&#x3D; &#39;(&#39; &amp;&amp; topElem !&#x3D; &#39;)&#39;)return false;if (str[i] &#x3D;&#x3D; &#39;[&#39; &amp;&amp; topElem !&#x3D; &#39;]&#39;)return false;if (str[i] &#x3D;&#x3D; &#39;&#123;&#39; &amp;&amp; topElem !&#x3D; &#39;&#125;&#39;)return false;&#125;&#125;&#125;return StackEmpty(S);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h2><img src="/2023/05/30/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/2.png" class title="知识点回顾">]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 括号匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="/2023/05/28/%E9%98%9F%E5%88%97/"/>
      <url>/2023/05/28/%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title=" 队列"></a><center> 队列</center></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>线性表是具有相同数据类型的n（n≥0）个数据元素的有限序列，其中n为表长，当n &#x3D; 0时线性表是一个空表。若用L命名线性表，则其一般表示为  L &#x3D; (a1, a2, … , ai, ai+1, … , an)  </li><li>栈（Stack）是只允许在一端进行插入或删除操作的线性表  </li><li>队列（Queue）是只允许在一端进行插入，在另一端删除的线性表</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>队列（Queue）是只允许在一端进行插入，在另一端删除的线性表  </p><img src="/2023/05/28/%E9%98%9F%E5%88%97/1-1.png" class title="定义"><h2 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h2><ul><li>InitQueue(&amp;Q)：初始化队列，构造一个空队列Q。</li><li>DestroyQueue(&amp;Q)：销毁队列。销毁并释放队列Q所占用的内存空间。</li><li>EnQueue(&amp;Q,x)：入队，若队列Q未满，将x加入，使之成为新的队尾。</li><li>DeQueue(&amp;Q,&amp;x)：出队，若队列Q非空，删除队头元素，并用x返回。</li><li>GetHead(Q,&amp;x)：读队头元素，若队列Q非空，则将队头元素赋值给x。</li><li>其他常用操作：<br>QueueEmpty(Q)：判队列空，若队列Q为空返回true，否则返回false。</li></ul><h2 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h2><img src="/2023/05/28/%E9%98%9F%E5%88%97/1-2.png" class title="知识">]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客书写说明</title>
      <link href="/2023/05/27/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
      <url>/2023/05/27/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="博客说明"><a href="#博客说明" class="headerlink" title="博客说明"></a>博客说明</h1><h2 id="需要的编辑软件"><a href="#需要的编辑软件" class="headerlink" title="需要的编辑软件"></a>需要的编辑软件</h2><ul><li>Typora</li><li>VSCode<br>轻量级文档编辑器</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="/images/1.jpg" alt="目隐都市的演绎者"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="www.baidu.com">百度</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/26/hello-world/"/>
      <url>/2023/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
